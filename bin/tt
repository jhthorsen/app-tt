#!/usr/bin/env perl
BEGIN {
  if (@ARGV and @ARGV[0] =~ /^\w/) {
    @ARGV = grep { (/^-{1,2}h\w{0,3}$/ ? ($ENV{APP_TT_HELP} = $ARGV[0], 0) : (1, 1))[1] } @ARGV;
  }
}
use Applify;
use File::Basename;
use File::Find;
use File::HomeDir;
use File::Path 'make_path';
use File::Spec;
use JSON::XS;
use Time::Piece;
use constant DEBUG => $ENV{APP_TT_DEBUG} || 0;

sub _say { printf shift . "\n", @_ }

option str => description => 'Description for an event',            alias => 'd';
option str => tag         => 'Tags for an event',                   alias => 't', n_of => '@';
option str => project     => 'Project name. Normally autodetected', alias => 'p';

documentation __FILE__;
version '0.01';

$SIG{__DIE__} = sub { Carp::confess($_[0]) }
  if DEBUG;

sub action_help {
  my $self   = shift;
  my $for    = shift || 'all';
  my $method = "_help_for_$for";

  if ($for eq 'all') {
    $self->_script->print_help;
    for (qw( report status start stop )) {
      $method = "_help_for_$_";
      print "\n---\nHelp for $_:\n";
      print $self->$method;
    }
  }
  else {
    return $self->_script->print_help unless $self->can($method);
    print $self->$method(@_);
    return 0;
  }
}

sub action_register {
  my ($self, $start, $stop, $project, $description, $tags) = @_;
  my ($duration, $trc_file);

  if (@_ == 1 and !-t STDIN) {
    while (<STDIN>) {
      next if /^\s*#/;
      chomp;
      my @args = split /\t/;
      $self->action_register(@args) if $args[0] and $args[1] and $args[2];
    }
    return 0;
  }

  die $self->_help_for_register unless $start and $stop and $project;

  $start    = $self->_from_iso_8601($start);
  $stop     = $self->_from_iso_8601($stop);
  $duration = $stop - $start;
  $trc_file = File::Spec->catfile($self->root, $self->_trc_path($project, $start));

  if (-e $trc_file) {
    warn "Already registered: $trc_file\n";
    return 1;
  }
  if ($duration < 300) {
    warn "Skipping $project - $start - $stop. Too short duration ($duration)\n";
    return 1;
  }

  my %event = (
    __CLASS__   => 'App::TimeTracker::Data::Task',
    project     => $project || $self->project,
    start       => $start->datetime,
    stop        => $stop->datetime,
    user        => scalar(getpwuid $<),
    tags        => [@{$self->tag}],
    description => $description || $self->description,
    seconds     => $duration->seconds,
    duration    => $self->_hms_duration($duration),
  );

  push @{$event{tags}}, split /,/, $tags || '';
  make_path(dirname($trc_file));
  _spurt(encode_json(\%event) => $trc_file);
  _say 'Registered "%s" at %s with duration %s', $event{project}, $event{start}, $self->_hms_duration($duration, 'hms');
}

sub action_report {
  my $self = shift;
  my ($interval, $offset) = @_;
  my ($when, $path);
  my $seconds    = 0;
  my $n_events   = 0;
  my @project_re = map {qr{^$_\b}} split /,/, $self->project || '.+';

  $offset ||= $interval || 0;
  $interval ||= 'month';
  $interval = 'month' if $interval =~ /\d/;
  $offset = 0 unless $offset =~ /\d/;

  if ($interval eq 'month') {
    $when = $self->now->add_months($offset);
    $path = File::Spec->catdir($self->root, $when->year, sprintf '%02s', $when->mon);
    $when = join ' ', $when->month, $when->year;
  }
  else {
    $when = $self->now->add_years($offset);
    $path = File::Spec->catdir($self->root, $when->year);
    $when = $when->year;
  }

  find {
    no_chdir => 0,
    wanted   => sub {
      my ($date, $hms, $project) = /^(\d+)-(\d+)_(.*)\.trc$/ or return;
      my $event = decode_json(_slurp($_));
      my $start = $self->_from_iso_8601($event->{start});
      return if @project_re and !grep { $event->{project} =~ $_ } @project_re;
      return unless $event->{seconds};
      $seconds += $event->{seconds};
      _say '%3s %2s %02s:%02s  %5s  %s', $start->month, $start->mday, $start->hour, $start->minute,
        $self->_hms_duration($event->{seconds}, 'hm'), $event->{project};
      $n_events++;
    }
  }, $path;

  warn sprintf "\nTotal for %s events in %s: %s\n", $n_events, $when, $self->_hms_duration($seconds, 'hms');
}

sub action_start {
  my ($self, @args) = @_;
  my $event = {};
  my $trc_file;

  warn "[APP_TT] start $trc_file\n" if DEBUG;
  $self->project(basename(File::Spec->rel2abs(File::Spec->curdir))) if -d '.git' and !$self->project;
  $trc_file = File::Spec->catfile($self->root, $self->_trc_path($self->project, $self->now));

  if (!$self->project) {
    warn "Cannot 'start' with unknown project name. Are you sure you are inside a git project?\n";
    return 1;    # Operation not permitted
  }

  $self->_stop_previous({start => 1});
  $self->_add_event_info($event);
  make_path(dirname($trc_file));
  _spurt(encode_json($event) => $trc_file);
  _spurt($trc_file => File::Spec->catfile($self->root, 'previous'));
  _say 'Started working on project "%s" at %s.', $event->{project}, $self->now->hms(':');
}

sub action_stop {
  my ($self, @args) = @_;
  return $self->_stop_previous;
}

sub action_status {
  my $self = shift;
  my ($trc_file, $event) = $self->_get_previous_event;

  warn "[APP_TT] status $trc_file\n" if DEBUG;

  if (!$event->{start}) {
    _say 'No event is being tracked.';
    return 3;    # No such process
  }
  elsif ($event->{stop}) {
    _say 'Stopped working on "%s" at %s after %s', $event->{project}, $event->{stop}, $event->{duration};
    return 3;    # No such process
  }
  else {
    my $duration = $self->now - $self->_from_iso_8601($event->{start}) + $self->tzoffset;
    _say 'Been working on "%s", for %s', $event->{project}, $self->_hms_duration($duration, 'hms');
    return 0;
  }
}

sub now { shift->{now} ||= localtime }

sub root {
  shift->{root} ||= $ENV{TIMETRACKER_HOME} || do {
    my $home = File::HomeDir->my_home || File::Spec->curdir;
    File::Spec->catdir($home, '.TimeTracker');
  };
}

sub tzoffset {
  my $self = shift;
  $self->{tzoffset} ||= $self->now->tzoffset;
}

sub _add_event_info {
  my ($self, $event) = @_;
  my $tags = $self->tag || [];

  $event->{__CLASS__} ||= 'App::TimeTracker::Data::Task';
  $event->{project}   ||= $self->project;
  $event->{seconds}   ||= undef;
  $event->{start}     ||= $self->now->datetime;
  $event->{user}      ||= scalar(getpwuid $<);
  $event->{tags}      ||= [];

  $event->{description} = $self->description if $self->description;

  for my $t (ref $tags ? @$tags : $tags) {
    push @{$event->{tags}}, $t;
  }
}

sub _from_iso_8601 {
  my ($self, $str) = @_;
  $str =~ s/(\d)\s(\d)/${1}T${2}/;
  $str =~ s/\.\d+$//;
  Time::Piece->strptime($str, '%Y-%m-%dT%H:%M:%S');
}

sub _get_previous_event {
  my $self = shift;
  my $trc_file = File::Spec->catfile($self->root, 'previous');

  warn "[APP_TT] _get_previous_event $trc_file\n" if DEBUG;

  return $trc_file, {} unless -r $trc_file;
  $trc_file = _slurp($trc_file);    # $ROOT/previous contains path to last .trc file
  $trc_file =~ s!\s*$!!;
  return $trc_file, {} unless -r $trc_file;
  return $trc_file, decode_json(_slurp($trc_file));    # slurp $ROOT/2015/08/20150827-085643_app_tt.trc
}

sub _help_for_register {
  <<'HERE';

This command is used to import data from other sources. "project-name" default to
"-p" or current git project, "some description" default to "-d" and tags can be
specified by -t foo -t bar

$ tt register 2010-01-21T18:50:00  2010-01-21T19:20:00 "project-name" "some description" "foo,bar"
$ echo "2010-01-21T18:50:00\t2010-01-21T19:20:00\tproject-name\tsome description\tfoo,bar" | tt register
HERE
}

sub _help_for_report {
  <<'HERE';

This command can report how much time you have spent on various
events.

$ tt report         # this month
$ tt report -2      # two months ago
$ tt report year    # report for year
$ tt report year -1 # last year
$ tt report -p foo  # Filter by project name
HERE
}

sub _help_for_start {
  <<'HERE';

This command will start tracking a new event. It will also stop the
current event if any event is in process. This action takes the
"-p" and "-t" switches. "-p" (project) is not required if you start
from a git repository.

# Specify a tag and custom project name
$ tt start -t ISSUE-999 -p some-project-at-work

# Started working at 08:00 instead of now
$ tt start 08:00
HERE
}

sub _help_for_status {
  <<'HERE';
Get the current status: Are you working on something or not?

$ tt status
HERE
}

sub _help_for_stop {
  <<'HERE';

This command will stop tracking the current event.

# Add more tags to the current event
$ tt stop -t meetings -t not_fun

# Stop working at 16:00 instead of now
$ tt stop 16:00
HERE
}

sub _hms_duration {
  my ($self, $duration, $sep) = @_;
  my $seconds = int(ref $duration ? $duration->seconds : $duration);
  my ($hours, $minutes);

  $hours = int($seconds / 3600);
  $seconds -= $hours * 3600;
  $minutes = int($seconds / 60);
  $seconds -= $minutes * 60;

  return sprintf '%s:%02s:%02s', $hours, $minutes, $seconds if !$sep;
  return sprintf '%2s:%02s', $hours, $minutes if $sep eq 'hm';
  return sprintf '%sh %sm %ss', $hours, $minutes, $seconds;
}

# From Mojo::Util
sub _slurp {
  my $path = shift;
  die qq{Can't open file "$path": $!} unless open my $file, '<', $path;
  my $content = '';
  while ($file->sysread(my $buffer, 131072, 0)) { $content .= $buffer }
  return $content;
}

# From Mojo::Util
sub _spurt {
  my ($content, $path) = @_;
  die qq{Can't open file "$path": $!} unless open my $file, '>', $path;
  die qq{Can't write to file "$path": $!} unless defined $file->syswrite($content);
  return $content;
}

sub _stop_previous {
  my ($self,     $args)  = @_;
  my ($trc_file, $event) = $self->_get_previous_event;

  if (!$event->{start} or $event->{stop}) {
    return 0 if $args->{start};
    warn "No previous event to stop.\n";
    return 3;    # No such process
  }

  my $duration = $self->now - $self->_from_iso_8601($event->{start}) + $self->tzoffset;

  # Probably some invalid timestamp was given as input
  if ($duration->seconds < 0) {
    die "Cannot work less than a second! Need to manually fix $trc_file";
  }

  $event->{duration} = $self->_hms_duration($duration);
  $event->{seconds}  = $duration->seconds;
  $event->{stop}     = $self->now->datetime;

  if ($event->{seconds} <= 300) {
    _say 'Dropping log event for "%s" since worked less than five minutes.', $event->{project};
    unlink $trc_file or die "rm $trc_file: $!";
  }
  else {
    $self->_add_event_info($event);
    _spurt(encode_json($event) => $trc_file);
    _say 'Stopped working on "%s" after %s', $event->{project}, $self->_hms_duration($duration, 'hms');
  }
}

sub _trc_path {
  my ($self, $project, $t) = @_;
  my $month = sprintf '%02s', $t->mon;
  $project =~ s!\W!_!g;
  return ($t->year, $month, sprintf '%s-%s_%s.trc', $t->ymd(''), $t->hms(''), $project);
}

app {
  my $self = shift;
  my $action = sprintf 'action_%s', shift || 'status';

  if ($ENV{APP_TT_HELP}) {
    return $self->action_help($ENV{APP_TT_HELP});
  }
  if (!$self->description) {
    my ($description) = grep {/^\w\S*\s/} @_;
    $self->description($description) if $description;
  }
  if (my ($hm) = grep {/^\d+:\d+$/} @_) {
    $self->{now} = Time::Piece->strptime(localtime->ymd('-') . "T$hm:00", '%Y-%m-%dT%H:%M:%S%z');
  }

  return $self->action_help('app') unless $self->can($action);
  return $self->$action(@_);
};

=head1 NAME

tt - Time tracking utility

=head1 SYNOPSIS

Basic usage:

  # Start to track time
  $ cd $HOME/git/my-project
  $ tt start
  # Work, work, work, cd ..., do other stuff
  $ tt stop

A bit more complex:

  # Start to work on an event and add a tag
  $ tt start -t ISSUE-999 -p some-project-at-work
  # Add another tag to the same event and add a --comment
  $ tt stop -t GITHUB-1005 "Today I was mostly in meetings"

Available actions: (each action takes "-h" for more details)

  $ tt {report,start,stop,status,register}
  $ tt start -h

=head1 DISCLAIMER

This code is not tested.

=head1 AUTHOR

Jan Henning Thorsen - jhthorsen@cpan.org

=cut

__END__
cat <<HERE | sqlite3 ~/Downloads/hamster.db -separator $'\t' | bin/tt register
SELECT f.start_time,f.end_time,a.name,f.description,group_concat(t.name)
FROM facts f
LEFT JOIN activities a ON a.id              = f.activity_id
LEFT JOIN fact_tags    ON fact_tags.fact_id = f.id
LEFT JOIN tags t       ON t.id              = fact_tags.tag_id
GROUP BY fact_tags.fact_id;
HERE

cat <<HERE | sqlite3 ~/Downloads/hamster.db -separator $'\t' | bin/tt register
SELECT f.start_time,f.end_time,a.name,f.description
FROM facts f LEFT JOIN activities a ON a.id = f.activity_id;
HERE
